// server/scripts/run-migrations.ts
// Non-interactive Drizzle migrator for Neon (Plesk-safe)
// - Reads DATABASE_URL via your loader (server/lib/load-env) or .env
// - Forces sslmode=require if missing
// - Applies SQL from server/drizzle (generated by drizzle-kit generate)

import "../lib/load-env";                 // your loader; keeps Plesk + local in sync
import "dotenv/config";                   // fallback if loader is a no-op locally
import { Pool } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
import { migrate } from "drizzle-orm/neon-serverless/migrator";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function main() {
  let url = process.env.DATABASE_URL?.trim();
  if (!url) {
    throw new Error(
      "DATABASE_URL is missing. Set it in Plesk ‚Üí Node.js ‚Üí Custom environment variables,\n" +
      "or create /httpdocs/server/.env with DATABASE_URL=..."
    );
  }
  if (!/[?&]sslmode=/.test(url)) {
    url += (url.includes("?") ? "&" : "?") + "sslmode=require";
  }

  const pool = new Pool({ connectionString: url, max: 1 });
  const db = drizzle(pool);

  const migrationsFolder = join(__dirname, "../drizzle"); // <-- matches drizzle.config.ts `out`

  console.log("üîÑ Applying migrations from:", migrationsFolder);
  await migrate(db, { migrationsFolder });
  await pool.end();
  console.log("üéâ Migrations complete.");
}

main().catch((err) => {
  console.error("‚ùå Migration failed:", err);
  process.exit(1);
});
